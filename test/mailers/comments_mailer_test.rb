require 'test_helper'
require 'sidekiq/testing'

class CommentsMailerTest < ActionMailer::TestCase
  # Section#import
  test "import reporting email generated" do
    assert_emails 1 do
      Section.import(file_fixture('test_crse.csv'))
    end
  end

  test "import reporting email content" do
    Section.import(file_fixture('test_crse.csv'))
    email = ActionMailer::Base.deliveries.last
    assert_equal [ENV['ENROLLCHAT_ADMIN_EMAIL']], email.from
    assert_equal [ENV['ENROLLCHAT_ADMIN_EMAIL']], email.to
    assert_equal 'Import Processed (Triggered in test)', email.subject
    assert_equal read_fixture('import_processed.html').join, email.body.to_s
  end

  # schduler rake task
  test "schedule old term purge email is generated" do
    Rake::Task.clear
    Enrollchat::Application.load_tasks
    travel_to Time.zone.local(2019, 1, 10, 10, 4, 44) do
      assert_emails 1 do
        Rake::Task['scheduler:schedule_old_term_purge'].invoke
      end
    end
    Rake::Task.clear
  end

  test "schedule old term purge email content" do
    Rake::Task.clear
    Enrollchat::Application.load_tasks
    travel_to Time.zone.local(2019, 1, 10, 10, 4, 44) do
      Rake::Task['scheduler:schedule_old_term_purge'].invoke
    end
    email = ActionMailer::Base.deliveries.last
    assert_equal [ENV['ENROLLCHAT_ADMIN_EMAIL']], email.from
    assert_equal [ENV['ENROLLCHAT_ADMIN_EMAIL']], email.to
    assert_equal 'Terms Marked for Deletion (Triggered in test)', email.subject
    assert_equal read_fixture('deletion_scheduled.html').join, email.body.to_s
    Rake::Task.clear
  end

  # import rake task
  test "'Import Executed' email is generated by import rake task" do
    Rake::Task.clear
    Enrollchat::Application.load_tasks
    assert_emails 1 do
      Rake::Task['import:retrieve_files'].invoke
    end
  end

  test "'Import Executed' email has at least the standard portion of its content." do
    Rake::Task.clear
    Enrollchat::Application.load_tasks
    Rake::Task['import:retrieve_files'].invoke
    email = ActionMailer::Base.deliveries.last
    assert_equal [ENV['ENROLLCHAT_ADMIN_EMAIL']], email.from
    assert_equal [ENV['ENROLLCHAT_ADMIN_EMAIL']], email.to
    assert_equal 'Import Executed (Triggered in test)', email.subject
    assert email.body.to_s.include?("<h1>Overall</h1><p>Download running.</p>")
    Rake::Task.clear
  end

  # digest worker
  test "Digest Executed email is generated" do
    Rake::Task.clear
    Sidekiq::Worker.clear_all
    Enrollchat::Application.load_tasks
    Rake::Task['daily_digests:send_emails'].invoke
    Sidekiq::Worker.drain_all
    assert_emails 1
    Sidekiq::Worker.clear_all
    Rake::Task.clear
  end

  test "Digest Executed email content" do
    user = users(:two)
    user.departments << 'BIS'
    user.save
    Rake::Task.clear
    Sidekiq::Worker.clear_all
    Enrollchat::Application.load_tasks
    Rake::Task['daily_digests:send_emails'].invoke
    Sidekiq::Worker.drain_all
    email = ActionMailer::Base.deliveries.last
    assert_equal [ENV['ENROLLCHAT_ADMIN_EMAIL']], email.from
    assert_equal [ENV['ENROLLCHAT_ADMIN_EMAIL']], email.to
    assert_equal 'EnrollChat Digest Task Executed (Triggered in test)', email.subject
    assert_equal read_fixture('digest_task_executed.html').join, email.body.to_s
    Sidekiq::Worker.clear_all
    Rake::Task.clear
  end

  test "Daily Digest email is generated" do
    user = users(:two)
    user.departments << 'BIS'
    user.save
    Rake::Task.clear
    Sidekiq::Worker.clear_all
    Enrollchat::Application.load_tasks
    Rake::Task['daily_digests:send_emails'].invoke
    Sidekiq::Worker.drain_all
    assert_emails 2
    Sidekiq::Worker.clear_all
    Rake::Task.clear
  end

  test "Digest Digest email content" do
    user = users(:two)
    user.departments << 'BIS'
    user.save
    Rake::Task.clear
    Sidekiq::Worker.clear_all
    Enrollchat::Application.load_tasks
    Rake::Task['daily_digests:send_emails'].invoke
    Sidekiq::Worker.drain_all
    email = ActionMailer::Base.deliveries.first
    assert_equal [ENV['ENROLLCHAT_ADMIN_EMAIL']], email.from
    assert_equal [ENV['ENROLLCHAT_ADMIN_EMAIL']], email.to
    assert_equal 'EnrollChat Comments Digest (Triggered in test)', email.subject
    assert email.body.to_s.include?("<h1>EnrollChat Daily Digest</h1>")
    assert email.body.to_s.include?("<p>EnrollChat allows you to choose to receive daily digests of comments or individual emails each time a comment is posted. You will be notified of comments relevant to your selected programs, or to all programs if you have not selected a department preference.</p>")
    assert email.body.to_s.include?("<h2>EnrollChat Digest Email for BIS")
    assert email.body.to_s.include?(">MyString-001</a>: 1 comment</p>")
    Sidekiq::Worker.clear_all
    Rake::Task.clear
  end
end
